@page "/"
@inject IJSRuntime js;

<PageTitle>Alarmes</PageTitle>


<table class="table table-bordered table-striped table-hover">
    <therad>
        <tr>
            <th>Alarme</th>
            <th>Duração</th>
            <th>Ação</th>
            <th>Próxima Execução</th>
        </tr>
        <tbody>
            @foreach (var alarme in lstAlarmes)
            {
                <tr>
                    <td>@alarme.Nome</td>
                    <td class="text-end">@alarme.Duracao</td>
                    <td class="text-start-50">
                        @if (alarme.Ativo)
                        {
                            <button class="btn alert-danger" @onclick="@(()=>MudaStatus(alarme))">Cancela</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="@(()=>MudaStatus(alarme))">Inicia</button>
                        }
                    </td>
                    <td class="text-end">
                        @if (alarme.Ativo)
                        {
                            <span>@alarme.Remanescente</span>
                        }
                        else
                        {
                            <span>Inativo</span>
                        }
                    </td>
                </tr>
            }

        </tbody>
    </therad>
</table>




@code {
    private List<Alarmes> lstAlarmes = new();
    private System.Threading.Timer timer;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //lstAlarmes.Add(new Alarmes() { Nome = "teste", Ativo = false, Duracao = 10 });
        lstAlarmes.Add(new Alarmes() { Nome = "B3 5min", Ativo = false, Duracao = 300 });
        lstAlarmes.Add(new Alarmes() { Nome = "B3 15min", Ativo = false, Duracao = 1200 });
        lstAlarmes.Add(new Alarmes() { Nome = "Forex 5min", Ativo = false, Duracao = 300 });
        lstAlarmes.Add(new Alarmes() { Nome = "Forex 15min", Ativo = false, Duracao = 1200 });
        timer = new(async p =>
        {
        Int32 agora = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            bool modificado = false;
            foreach (var alarmeAtivo in lstAlarmes.Where(p => p.Ativo))
            {
                modificado = true;
                alarmeAtivo.Remanescente = alarmeAtivo.ProximaExecucao - agora;
            if (agora >= alarmeAtivo.ProximaExecucao)
                {
                    alarmeAtivo.ProximaExecucao += alarmeAtivo.Duracao;
                    await js.InvokeVoidAsync("PlayAlarme");
                }
            }
            if (modificado)
                StateHasChanged(); 

        }, new System.Threading.AutoResetEvent(true), 1000, 1000);
    }

    protected void MudaStatus(Alarmes valor)
    {
        if (valor.Ativo)
        {
            valor.Ativo = false;
            valor.ProximaExecucao = 0;
        }
        else
        {
            Int32 agora = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            valor.ProximaExecucao = agora + valor.Duracao;
            valor.Ativo = true;
        }
    }

}